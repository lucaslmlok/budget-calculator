{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleDelete","handleEdit","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initalExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuid","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fa721de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdEdit, MdDelete } from \"react-icons/md\";\r\n\r\nconst ExpenseItem = ({ expense, handleDelete, handleEdit }) => {\r\n  const { id, charge, amount } = expense;\r\n  return (\r\n    <li className=\"item\">\r\n      <div className=\"info\">\r\n        <span className=\"expense\">{charge}</span>\r\n        <span className=\"amount\">${amount}</span>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"edit-btn\"\r\n          aria-label=\"edit button\"\r\n          onClick={() => handleEdit(id)}\r\n        >\r\n          <MdEdit />\r\n        </button>\r\n        <button\r\n          className=\"clear-btn\"\r\n          aria-label=\"delete button\"\r\n          onClick={() => handleDelete(id)}\r\n        >\r\n          <MdDelete />\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport Item from \"./ExpenseItem\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nconst ExpenseList = ({ expenses, handleDelete, handleEdit, clearItems }) => {\r\n  return (\r\n    <>\r\n      <ul className=\"list\">\r\n        {expenses.map(expense => {\r\n          return (\r\n            <Item\r\n              key={expense.id}\r\n              expense={expense}\r\n              handleDelete={handleDelete}\r\n              handleEdit={handleEdit}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {expenses.length > 0 && (\r\n        <button className=\"btn\" onClick={clearItems}>\r\n          clear expenses\r\n          <MdDelete className=\"btn-icon\" />\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpenseList;\r\n","import React from \"react\";\r\nimport { MdSend } from \"react-icons/md\";\r\n\r\nconst ExpenseForm = ({\r\n  charge,\r\n  amount,\r\n  handleCharge,\r\n  handleAmount,\r\n  handleSubmit,\r\n  edit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-center\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"charge\">charge</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"charge\"\r\n            name=\"charge\"\r\n            placeholder=\"e.g. rent\"\r\n            value={charge}\r\n            onChange={handleCharge}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"amount\">amount</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"amount\"\r\n            name=\"amount\"\r\n            placeholder=\"e.g. 100\"\r\n            value={amount}\r\n            onChange={handleAmount}\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn\">\r\n        {edit ? \"edit\" : \"submit\"}\r\n        <MdSend className=\"btn-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ type, text }) => {\r\n  return <div className={`alert alert-${type}`}>{text}</div>;\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport List from \"./components/ExpenseList\";\r\nimport Form from \"./components/ExpenseForm\";\r\nimport Alert from \"./components/Alert\";\r\nimport uuid from \"uuid/v4\";\r\n\r\n// const initalExpenses = [\r\n//   { id: uuid(), charge: \"rent\", amount: 1600 },\r\n//   { id: uuid(), charge: \"car payment\", amount: 400 },\r\n//   { id: uuid(), charge: \"credit card bill\", amount: 1200 }\r\n// ];\r\n\r\nconst initalExpenses = localStorage.getItem(\"expenses\")\r\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\r\n  : [];\r\n\r\nfunction App() {\r\n  // *********** state values ***********\r\n  const [expenses, setExpenses] = useState(initalExpenses);\r\n  const [charge, setCharge] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [alert, setAlert] = useState({ show: false });\r\n  const [edit, setEdit] = useState(false);\r\n  const [id, setId] = useState(0);\r\n  // *********** useEffect ***********\r\n  useEffect(() => {\r\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\r\n  }, [expenses]);\r\n  // *********** functionality ***********\r\n  const handleCharge = e => {\r\n    setCharge(e.target.value);\r\n  };\r\n\r\n  const handleAmount = e => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const handleAlert = ({ type, text }) => {\r\n    setAlert({ show: true, type, text });\r\n    setTimeout(() => setAlert({ show: false }), 4000);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (charge !== \"\" && amount > 0) {\r\n      if (edit) {\r\n        let tempExpenses = expenses.map(item => {\r\n          return item.id === id ? { ...item, charge, amount } : item;\r\n        });\r\n        setExpenses(tempExpenses);\r\n        setEdit(false);\r\n        setId(0);\r\n        handleAlert({ type: \"success\", text: \"item edited\" });\r\n      } else {\r\n        const singleExpense = { id: uuid(), charge, amount };\r\n        setExpenses([...expenses, singleExpense]);\r\n        handleAlert({ type: \"success\", text: \"item added\" });\r\n      }\r\n      setCharge(\"\");\r\n      setAmount(\"\");\r\n    } else {\r\n      // handle alert called\r\n      handleAlert({\r\n        type: \"danger\",\r\n        text: `charge can't be empty value and amount value has to be bigger than zero`\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearItems = () => {\r\n    setExpenses([]);\r\n    handleAlert({ type: \"danger\", text: \"all items deleted\" });\r\n  };\r\n\r\n  const handleDelete = id => {\r\n    setExpenses(expenses.filter(item => item.id !== id));\r\n    handleAlert({ type: \"danger\", text: \"item deleted\" });\r\n  };\r\n\r\n  const handleEdit = id => {\r\n    let expense = expenses.find(item => item.id === id);\r\n    setCharge(expense.charge);\r\n    setAmount(expense.amount);\r\n    setEdit(true);\r\n    setId(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\r\n      <h1>budget calculator</h1>\r\n      <main className=\"App\">\r\n        <Form\r\n          charge={charge}\r\n          amount={amount}\r\n          handleCharge={handleCharge}\r\n          handleAmount={handleAmount}\r\n          handleSubmit={handleSubmit}\r\n          edit={edit}\r\n        />\r\n        <List\r\n          expenses={expenses}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleEdit}\r\n          clearItems={clearItems}\r\n        />\r\n      </main>\r\n      <h1>\r\n        total spending :{\" \"}\r\n        <span className=\"total\">\r\n          $\r\n          {expenses.reduce((acc, curr) => {\r\n            return (acc += parseInt(curr.amount));\r\n          }, 0)}\r\n        </span>\r\n      </h1>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}